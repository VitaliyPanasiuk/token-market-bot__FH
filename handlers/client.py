from multiprocessing.connection import answer_challenge
import os
from pydoc import describe
from config import dp, bot,admins
# from keyboards import inline_key as kb
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import sqlite3 as sq
from data_base import sqlite_db_users
from aiogram.types import Message, ReplyKeyboardMarkup
from misc.texts import SERVICE_FIRST, SERVICE_SECOND, SERVICE_THIRD
from misc.func import chek_auf_user, get_profile, get_balance
from misc.func_get_text import get_text
from keyboards.text_key import start_markup, profile_markup,services_markup,cancel_markup

from aiogram.dispatcher.filters.state import State, StatesGroup
from states.donate_state import donateState

from datetime import datetime


# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞. –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –≤–Ω–æ—Å–∏—Ç—å—Å—è –≤ –±–¥
async def start_command(message: types.Message):
    userid = message.from_user.id
    user_name = message.from_user.username

    if chek_auf_user(userid) == False:
        data = (userid,user_name,0,0)
        await sqlite_db_users.sql_add_user(data)

    await bot.send_message(userid, get_text('on_startup'),reply_markup=start_markup())

# –ª–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫=—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Ñ–∏–ª—è\–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\–Ω–∞–∑–∞–¥\–ø–æ–ª—É—á–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞
async def profile_message(message: types.Message):
    userid = message.from_user.id
    await bot.send_message(userid, get_profile(userid),reply_markup=profile_markup())

async def instruction_message(message: types.Message):
    userid = message.from_user.id
    await bot.send_message(userid, get_text('instruction'),reply_markup=start_markup())

async def contsacts_message(message: types.Message):
    userid = message.from_user.id
    await bot.send_message(userid, get_text('contacts'),reply_markup=start_markup())

async def back_message(message: types.Message):
    userid = message.from_user.id
    await bot.send_message(userid, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_markup())

async def get_token_message(message: types.Message):
    userid = message.from_user.id
    await bot.send_message(userid, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å',reply_markup=services_markup())


# –ª–æ–≤–∏–º —Å–µ—Ä–≤–∏—Å –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def service1_message(message: types.Message):
    userid = message.from_user.id
    balance = get_balance(userid)
    if int(balance) >= int(get_text('price_first')): # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ —Ç–æ —Å–ø–∏—Å—ã–≤–≤–∞–µ–º –¥–µ–Ω–±–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –≤—ã–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        await bot.send_message(userid, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å',reply_markup=types.ReplyKeyboardRemove())
        # token_to_user = func()   –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # await sqlite_db_users.sql_decrease_balance(get_text('price_first'),userid) —Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–∑–∫–æ–º–µ–Ω–∏—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—ã—à–µ
        today = datetime.now().strftime('%d.%m.%Y')
        data = (SERVICE_FIRST,today,userid)
        await sqlite_db_users.sql_add_transaction(data) #–≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    else:
        await bot.send_message(userid, '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',reply_markup=start_markup())

async def service2_message(message: types.Message):
    userid = message.from_user.id
    balance = get_balance(userid)
    if int(balance) >= int(get_text('price_second')):
        await bot.send_message(userid, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å',reply_markup=types.ReplyKeyboardRemove())
        # token_to_user = func()   –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # await sqlite_db_users.sql_decrease_balance(get_text('price_first'),userid) —Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–∑–∫–æ–º–µ–Ω–∏—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—ã—à–µ
        today = datetime.now().strftime('%d.%m.%Y')
        data = (SERVICE_SECOND,today,userid)
        await sqlite_db_users.sql_add_transaction(data) #–≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    else:
        await bot.send_message(userid, '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',reply_markup=start_markup())

async def service3_message(message: types.Message):
    userid = message.from_user.id
    balance = get_balance(userid)
    if int(balance) >= int(get_text('price_third')):
        await bot.send_message(userid, '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å',reply_markup=types.ReplyKeyboardRemove())
        # token_to_user = func()   –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        # await sqlite_db_users.sql_decrease_balance(get_text('price_first'),userid) —Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–∑–∫–æ–º–µ–Ω–∏—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—ã—à–µ
        today = datetime.now().strftime('%d.%m.%Y')
        data = (SERVICE_THIRD,today,userid)
        await sqlite_db_users.sql_add_transaction(data) #–≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    else:
        await bot.send_message(userid, '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',reply_markup=start_markup())


# –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def donate_message(message: types.Message):
    userid = message.from_user.id
    await bot.send_message(userid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',reply_markup=cancel_markup())
    await donateState.get_sum.set() # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã


# –ª–æ–≤–∏–º —Å –ø–æ–º–æ—â—å—é –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def get_sum_message(message: types.Message, state=donateState.get_sum):
    userid = message.from_user.id
    if message.text != '–û—Ç–º–µ–Ω–∞':
        async with state.proxy() as data:
            data['get_sum'] = message.text
        await bot.send_message(userid,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫')
        await donateState.get_chek.set()
    else:
        await bot.send_message(userid,'–≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',reply_markup=start_markup())
        await state.finish()
    

# –ª–æ–≤–∏–º —á–µ–∫ 
async def get_chek_message(message: types.Message, state=donateState.get_chek):
    userid = message.from_user.id
    if message.text != '–û—Ç–º–µ–Ω–∞':
        async with state.proxy() as data:
            data['get_chek'] = message.text
        # –≤—ã–∑–≤–∞—Ç—å —Ç—É—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–≤–∞–∞–∫—Ü–∏–∏  data['get_sum'] - —Å—É–º–º–∞ –ø–æ–ø–ª–Ω–µ–Ω–∏—è, data['get_chek'] - —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –∫—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ–æ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ —Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ | await sqlite_db_users.sql_increase_balance(data['get_sum'],userid)
        today = datetime.now().strftime('%d.%m.%Y')
        data = (userid,today,data['get_sum'])
        await sqlite_db_users.sql_add_donate(data) # –≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await state.finish()
    else:
        await bot.send_message(userid,'–≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',reply_markup=start_markup())
        await state.finish()


    
# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_command,commands=['start'])

    dp.register_message_handler(profile_message,text=['–ü—Ä–æ—Ñ–∏–ª—å'])
    dp.register_message_handler(get_token_message,text=['–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω'])
    dp.register_message_handler(donate_message,text=['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'])

    dp.register_message_handler(service1_message,text=[SERVICE_FIRST])
    dp.register_message_handler(service2_message,text=[SERVICE_SECOND])
    dp.register_message_handler(service3_message,text=[SERVICE_THIRD])

    dp.register_message_handler(contsacts_message,text=['–ö–æ–Ω—Ç–∞–∫—Ç—ã'])
    dp.register_message_handler(instruction_message,text=['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'])
    dp.register_message_handler(back_message,text=['üëà –ù–∞–∑–∞–¥'])

    dp.register_message_handler(get_sum_message,state=donateState.get_sum)
    dp.register_message_handler(get_chek_message, state=donateState.get_chek)

